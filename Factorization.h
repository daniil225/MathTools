#pragma once

#include "DataStruct.h"
#include<vector>
// Содержится набор функций для факторизации различными способами 
namespace Factorization
{

	/* Структуры данных для хранения факторизованных матриц */
	/* Ввиду того, что факторизация определяется для матриц связпнных с полученными будем хранить лишь информационную часть
	   тоесть, только элементы полученной матрицы без массивов ig и jg
	*/

	// Факторизованная строчно столбцовая матрица симметричная 
	struct SPARSE_ROW_COL_SYMETRIC_FACT
	{
		std::vector<double> gg;
		std::vector<double> di;
	};

	// Факторизованная строчно столбцовая матрица не симметричная 
	struct SPARSE_ROW_COL_FACT
	{
		std::vector<double> ggu;
		std::vector<double> ggl;
		std::vector<double> di;
	};

	/* Факторизация Диагональная  */
	/* Сразу расчитывается матрица обраттная к диагональной  тоесть d(i,i) = 1/sdrt(di[i])*/
	std::vector<double> DiagonalFact(const std::vector<double>& di);
	/****************************************************************/

	/*  Неполная факторизация Холецкого  */
	// Предполагается, что матрица передается как шаблонный параметр   
	SPARSE_ROW_COL_SYMETRIC_FACT LLTFact(SPARSE_ROW_COL_SYMETRIC_MATRIX& matr);
	/***************************************************************/

	/* Неполная факторизация для алгоритма LU(sq) */  
	SPARSE_ROW_COL_FACT LUsqFact(SPARSE_ROW_COL& matr);
	/**************************************************************/

	/* Неполная факторизация с применением алгоритма  LU разложения */
	/* Примечание: с его помощью можно МСГ сдлеать для несимметричных матриц  */
	SPARSE_ROW_COL_FACT LUFact(SPARSE_ROW_COL& matr);

};